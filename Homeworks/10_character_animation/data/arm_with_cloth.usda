#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    endTimeCode = 40
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def SkelRoot "Model"
    {
        matrix4d xformOp:transform = ( (0.9999999403953552, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Mesh"
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "Mesh" (
                prepend apiSchemas = ["SkelBindingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, 0), (0.5, 0.5, 4)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [2, 3, 1, 0, 6, 7, 5, 4, 8, 9, 7, 6, 3, 2, 9, 8, 10, 11, 4, 5, 0, 1, 11, 10, 7, 9, 10, 5, 9, 2, 0, 10, 3, 8, 11, 1, 8, 6, 4, 11]
                normal3f[] normals = [(0.57735026, 0.57735026, 0.57735026), (-0.57735026, 0.57735026, 0.57735026), (-0.57735026, -0.57735026, 0.57735026), (0.57735026, -0.57735026, 0.57735026), (-0.57735026, 0.57735026, -0.57735026), (0.57735026, 0.57735026, -0.57735026), (0.57735026, -0.57735026, -0.57735026), (-0.57735026, -0.57735026, -0.57735026), (-0.70710677, 0.70710677, 0), (0.70710677, 0.70710677, 0), (0.57735026, 0.57735026, -0.57735026), (-0.57735026, 0.57735026, -0.57735026), (-0.57735026, 0.57735026, 0.57735026), (0.57735026, 0.57735026, 0.57735026), (0.70710677, 0.70710677, 0), (-0.70710677, 0.70710677, 0), (0.70710677, -0.70710677, 0), (-0.70710677, -0.70710677, 0), (-0.57735026, -0.57735026, -0.57735026), (0.57735026, -0.57735026, -0.57735026), (0.57735026, -0.57735026, 0.57735026), (-0.57735026, -0.57735026, 0.57735026), (-0.70710677, -0.70710677, 0), (0.70710677, -0.70710677, 0), (0.57735026, 0.57735026, -0.57735026), (0.70710677, 0.70710677, 0), (0.70710677, -0.70710677, 0), (0.57735026, -0.57735026, -0.57735026), (0.70710677, 0.70710677, 0), (0.57735026, 0.57735026, 0.57735026), (0.57735026, -0.57735026, 0.57735026), (0.70710677, -0.70710677, 0), (-0.57735026, 0.57735026, 0.57735026), (-0.70710677, 0.70710677, 0), (-0.70710677, -0.70710677, 0), (-0.57735026, -0.57735026, 0.57735026), (-0.70710677, 0.70710677, 0), (-0.57735026, 0.57735026, -0.57735026), (-0.57735026, -0.57735026, -0.57735026), (-0.70710677, -0.70710677, 0)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(0.5, -0.5, 4), (-0.5, -0.5, 4), (0.5, 0.5, 4), (-0.5, 0.5, 4), (-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0), (-0.5, 0.5, 2), (0.5, 0.5, 2), (0.5, -0.5, 2), (-0.5, -0.5, 2)]
                float[] primvars:ControlPoints = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                    interpolation = "vertex"
                )
                matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                int[] primvars:skel:jointIndices = [2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0] (
                    elementSize = 2
                    interpolation = "vertex"
                )
                float[] primvars:skel:jointWeights = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0] (
                    elementSize = 2
                    interpolation = "vertex"
                )
                rel skel:skeleton = </root/Model/Skel/Skel>
                uniform token subdivisionScheme = "none"
            }
        }

        def Xform "Skel"
        {
            matrix4d xformOp:transform.timeSamples = {
                1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Skeleton "Skel" (
                prepend apiSchemas = ["SkelBindingAPI"]
            )
            {
                uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 4, 1) )]
                uniform token[] joints = ["Shoulder", "Shoulder/Elbow", "Shoulder/Elbow/Hand"]
                uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) )]
                rel skel:animationSource = </root/Model/Skel/Skel/Anim>

                def SkelAnimation "Anim"
                {
                    uniform token[] joints = ["Shoulder", "Shoulder/Elbow", "Shoulder/Elbow/Hand"]
                    quatf[] rotations.timeSamples = {
                        1: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                        2: [(1, 0, 0, 0), (0.99983317, 0.01826491, 0, 0), (1, 0, 0, 0)],
                        3: [(1, 0, 0, 0), (0.999323, 0.036789563, 0, 0), (1, 0, 0, 0)],
                        4: [(1, 0, 0, 0), (0.99845535, 0.05556005, 0, 0), (1, 0, 0, 0)],
                        5: [(1, 0, 0, 0), (0.99721646, 0.074561, 0, 0), (1, 0, 0, 0)],
                        6: [(1, 0, 0, 0), (0.99559337, 0.0937756, 0, 0), (1, 0, 0, 0)],
                        7: [(1, 0, 0, 0), (0.99357384, 0.11318562, 0, 0), (1, 0, 0, 0)],
                        8: [(1, 0, 0, 0), (0.9911467, 0.13277148, 0, 0), (1, 0, 0, 0)],
                        9: [(1, 0, 0, 0), (0.9883016, 0.15251216, 0, 0), (1, 0, 0, 0)],
                        10: [(1, 0, 0, 0), (0.9850296, 0.1723855, 0, 0), (1, 0, 0, 0)],
                        11: [(1, 0, 0, 0), (0.9813228, 0.19236803, 0, 0), (1, 0, 0, 0)],
                        12: [(1, 0, 0, 0), (0.9771751, 0.21243536, 0, 0), (1, 0, 0, 0)],
                        13: [(1, 0, 0, 0), (0.97258157, 0.23256207, 0, 0), (1, 0, 0, 0)],
                        14: [(1, 0, 0, 0), (0.96753895, 0.25272188, 0, 0), (1, 0, 0, 0)],
                        15: [(1, 0, 0, 0), (0.96204585, 0.2728879, 0, 0), (1, -1.4901161e-8, 0, 0)],
                        16: [(1, 0, 0, 0), (0.9561024, 0.29303282, 0, 0), (1, 0, 0, 0)],
                        17: [(1, 0, 0, 0), (0.94971067, 0.31312886, 0, 0), (1, 0, 0, 0)],
                        18: [(1, 0, 0, 0), (0.9428745, 0.33314812, 0, 0), (1, -1.4901161e-8, 0, 0)],
                        19: [(1, 0, 0, 0), (0.93559957, 0.353063, 0, 0), (1, -2.9802322e-8, 0, 0)],
                        20: [(1, 0, 0, 0), (0.92789334, 0.37284568, 0, 0), (1, 0, 0, 0)],
                        21: [(1, 0, 0, 0), (0.9197652, 0.39246908, 0, 0), (1, 0, 0, 0)],
                        22: [(1, 0, 0, 0), (0.911226, 0.4119068, 0, 0), (1, 0, 0, 0)],
                        23: [(1, 0, 0, 0), (0.90228844, 0.4311329, 0, 0), (1, 0, 0, 0)],
                        24: [(1, 0, 0, 0), (0.89296675, 0.45012268, 0, 0), (1, -1.4901161e-8, 0, 0)],
                        25: [(1, 0, 0, 0), (0.88327646, 0.46885252, 0, 0), (1, 1.4901161e-8, 0, 0)],
                        26: [(1, 0, 0, 0), (0.87323475, 0.48729983, 0, 0), (1, 0, 0, 0)],
                        27: [(1, 0, 0, 0), (0.86285955, 0.50544375, 0, 0), (1, 0, 0, 0)],
                        28: [(1, 0, 0, 0), (0.8521702, 0.52326465, 0, 0), (1, 0, 0, 0)],
                        29: [(1, 0, 0, 0), (0.8411868, 0.5407446, 0, 0), (1, 0, 0, 0)],
                        30: [(1, 0, 0, 0), (0.8299302, 0.5578673, 0, 0), (1, 0, 0, 0)],
                        31: [(1, 0, 0, 0), (0.8184215, 0.57461834, 0, 0), (1, 0, 0, 0)],
                        32: [(1, 0, 0, 0), (0.8066829, 0.5909846, 0, 0), (1, 0, 0, 0)],
                        33: [(1, 0, 0, 0), (0.79473597, 0.6069553, 0, 0), (1, 0, 0, 0)],
                        34: [(1, 0, 0, 0), (0.7826031, 0.622521, 0, 0), (1, 0, 0, 0)],
                        35: [(1, 0, 0, 0), (0.7703063, 0.6376741, 0, 0), (1, 0, 0, 0)],
                        36: [(1, 0, 0, 0), (0.75786734, 0.65240866, 0, 0), (1, 7.450581e-9, 0, 0)],
                        37: [(1, 0, 0, 0), (0.7453078, 0.6667205, 0, 0), (1, 3.7252907e-9, 0, 0)],
                        38: [(1, 0, 0, 0), (0.73264873, 0.68060696, 0, 0), (1, -3.7252907e-9, 0, 0)],
                        39: [(1, 0, 0, 0), (0.7199108, 0.6940666, 0, 0), (1, 0, 0, 0)],
                        40: [(1, 0, 0, 0), (0.70711356, 0.7071, 0, 0), (1, -9.094947e-13, 0, 0)],
                    }
                    half3[] scales.timeSamples = {
                        1: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        2: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        3: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        4: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        5: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        6: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        7: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        8: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        9: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        10: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        11: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        12: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        13: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        14: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        15: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        16: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        17: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        18: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        19: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        20: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        21: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        22: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        23: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        24: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        25: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        26: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        27: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        28: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        29: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        30: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        31: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        32: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        33: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        34: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        35: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        36: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        37: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        38: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        39: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                        40: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    }
                    float3[] translations.timeSamples = {
                        1: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        2: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        3: [(0, 0, 0), (0, 0, 2), (0, -1.4901161e-8, 1.9999999)],
                        4: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        5: [(0, 0, 0), (0, 0, 2), (0, 0, 2.0000002)],
                        6: [(0, 0, 0), (0, 0, 2), (0, 5.9604645e-8, 2)],
                        7: [(0, 0, 0), (0, 0, 2), (0, 2.9802322e-8, 2)],
                        8: [(0, 0, 0), (0, 0, 2), (0, -5.9604645e-8, 2)],
                        9: [(0, 0, 0), (0, 0, 2), (0, 0, 1.9999999)],
                        10: [(0, 0, 0), (0, 0, 2), (0, 5.9604645e-8, 2)],
                        11: [(0, 0, 0), (0, 0, 2), (0, 0, 2.0000005)],
                        12: [(0, 0, 0), (0, 0, 2), (0, -5.9604645e-8, 1.9999999)],
                        13: [(0, 0, 0), (0, 0, 2), (0, 0, 1.9999999)],
                        14: [(0, 0, 0), (0, 0, 2), (0, -5.9604645e-8, 2)],
                        15: [(0, 0, 0), (0, 0, 2), (0, 2.3841858e-7, 2)],
                        16: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        17: [(0, 0, 0), (0, 0, 2), (0, 1.1920929e-7, 2)],
                        18: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        19: [(0, 0, 0), (0, 0, 2), (0, 1.1920929e-7, 2)],
                        20: [(0, 0, 0), (0, 0, 2), (0, 0, 2.0000002)],
                        21: [(0, 0, 0), (0, 0, 2), (0, 1.1920929e-7, 2)],
                        22: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 1.9999999)],
                        23: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 2)],
                        24: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 2)],
                        25: [(0, 0, 0), (0, 0, 2), (0, 1.1920929e-7, 2)],
                        26: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        27: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 2)],
                        28: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        29: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        30: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        31: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 2)],
                        32: [(0, 0, 0), (0, 0, 2), (0, 0, 2.0000002)],
                        33: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 2)],
                        34: [(0, 0, 0), (0, 0, 2), (0, 0, 1.9999999)],
                        35: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 2)],
                        36: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                        37: [(0, 0, 0), (0, 0, 2), (0, -1.1920929e-7, 1.9999998)],
                        38: [(0, 0, 0), (0, 0, 2), (0, 0, 1.9999998)],
                        39: [(0, 0, 0), (0, 0, 2), (0, 0, 1.9999999)],
                        40: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                    }
                }
            }
        }
    }

    def Xform "Grid"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Grid"
        {
            float3[] extent = [(-1, -2.5, 4), (1, -0.5, 4)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 5, 0, 2, 6, 1, 3, 7, 2, 4, 8, 3, 6, 10, 5, 7, 11, 6, 8, 12, 7, 9, 13, 8, 11, 15, 10, 12, 16, 11, 13, 17, 12, 14, 18, 13, 16, 20, 15, 17, 21, 16, 18, 22, 17, 19, 23, 18, 1, 6, 5, 2, 7, 6, 3, 8, 7, 4, 9, 8, 6, 11, 10, 7, 12, 11, 8, 13, 12, 9, 14, 13, 11, 16, 15, 12, 17, 16, 13, 18, 17, 14, 19, 18, 16, 21, 20, 17, 22, 21, 18, 23, 22, 19, 24, 23]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1, -2.5, 4), (-0.5, -2.5, 4), (0, -2.5, 4), (0.5, -2.5, 4), (1, -2.5, 4), (-1, -2, 4), (-0.5, -2, 4), (0, -2, 4), (0.5, -2, 4), (1, -2, 4), (-1, -1.5, 4), (-0.5, -1.5, 4), (0, -1.5, 4), (0.5, -1.5, 4), (1, -1.5, 4), (-1, -1, 4), (-0.5, -1, 4), (0, -1, 4), (0.5, -1, 4), (1, -1, 4), (-1, -0.5, 4), (-0.5, -0.5, 4), (0, -0.5, 4), (0.5, -0.5, 4), (1, -0.5, 4)]
            float[] primvars:ControlPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0] (
                interpolation = "vertex"
            )
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.25, 0), (0, 0.25), (0, 0), (0.5, 0), (0.25, 0.25), (0.25, 0), (0.75, 0), (0.5, 0.25), (0.5, 0), (1, 0), (0.75, 0.25), (0.75, 0), (0.25, 0.25), (0, 0.5), (0, 0.25), (0.5, 0.25), (0.25, 0.5), (0.25, 0.25), (0.75, 0.25), (0.5, 0.5), (0.5, 0.25), (1, 0.25), (0.75, 0.5), (0.75, 0.25), (0.25, 0.5), (0, 0.75), (0, 0.5), (0.5, 0.5), (0.25, 0.75), (0.25, 0.5), (0.75, 0.5), (0.5, 0.75), (0.5, 0.5), (1, 0.5), (0.75, 0.75), (0.75, 0.5), (0.25, 0.75), (0, 1), (0, 0.75), (0.5, 0.75), (0.25, 1), (0.25, 0.75), (0.75, 0.75), (0.5, 1), (0.5, 0.75), (1, 0.75), (0.75, 1), (0.75, 0.75), (0.25, 0), (0.25, 0.25), (0, 0.25), (0.5, 0), (0.5, 0.25), (0.25, 0.25), (0.75, 0), (0.75, 0.25), (0.5, 0.25), (1, 0), (1, 0.25), (0.75, 0.25), (0.25, 0.25), (0.25, 0.5), (0, 0.5), (0.5, 0.25), (0.5, 0.5), (0.25, 0.5), (0.75, 0.25), (0.75, 0.5), (0.5, 0.5), (1, 0.25), (1, 0.5), (0.75, 0.5), (0.25, 0.5), (0.25, 0.75), (0, 0.75), (0.5, 0.5), (0.5, 0.75), (0.25, 0.75), (0.75, 0.5), (0.75, 0.75), (0.5, 0.75), (1, 0.5), (1, 0.75), (0.75, 0.75), (0.25, 0.75), (0.25, 1), (0, 1), (0.5, 0.75), (0.5, 1), (0.25, 1), (0.75, 0.75), (0.75, 1), (0.5, 1), (1, 0.75), (1, 1), (0.75, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Xform "Camera"
    {
        matrix4d xformOp:transform = ( (0.6859206557273865, 0.7276763319969177, 0, 0), (-0.32401347160339355, 0.305420845746994, 0.8953956365585327, 0), (0.6515582203865051, -0.6141703724861145, 0.44527140259742737, 0), (7.358891487121582, -6.925790786743164, 4.958309173583984, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Camera "Camera"
        {
            float2 clippingRange = (0.1, 100)
            float focalLength = 0.5
            float horizontalAperture = 0.36
            float horizontalApertureOffset = 0
            token projection = "perspective"
            float verticalAperture = 0.2025
            float verticalApertureOffset = 0
        }
    }

    def Xform "Light"
    {
        matrix4d xformOp:transform = ( (-0.29086464643478394, 0.9551711678504944, -0.05518905818462372, 0), (-0.7711008191108704, -0.1998833566904068, 0.6045247316360474, 0), (0.5663931965827942, 0.21839119493961334, 0.7946722507476807, 0), (4.076245307922363, 1.0054539442062378, 5.903861999511719, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SphereLight "Light"
        {
            float3[] extent = [(-0.1, -0.1, -0.1), (0.1, 0.1, 0.1)]
            color3f inputs:color = (1, 1, 1)
            float inputs:diffuse = 1
            float inputs:exposure = 0
            float inputs:intensity = 318.30988
            bool inputs:normalize = 1
            float inputs:radius = 0.1
            float inputs:specular = 1
        }
    }
}

